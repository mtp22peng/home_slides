hist(concrete$SuperPlasticizer)
concrete$SuperPlasticizer
names(concrete)
hist(concrete$Superplasticizer)
concrete$Superplasticizer
log(10)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
dat <- training[,  which (grepl("IL", names(training)))]
names(dat)
dat <- training[,  which (grepl("^IL", names(training)))]
names(dat)
head(dat)
res.pca <- prcomp(dat, scale = TRUE)
names(res.pca)
eig <- (res.pca$sdev)^2
# Variances in percentage
variance <- eig*100/sum(eig)
# Cumulative variances
cumvar <- cumsum(variance)
eig.decathlon2.active <- data.frame(eig = eig, variance = variance,
cumvariance = cumvar)
head(eig.decathlon2.active)
head(eig.decathlon2.active, 10)
names(AlzheimerDisease)
names(adData)
adData$diagnosis
data <- cbind(training$diagnosis, dat)
names(data)
head(data)
dat1 <- cbind(training$diagnosis, dat)
dat1$`training$diagnosis`
names(dat1)
names(dat1)[1] <- "diagnosis"
names(dat1)
modelFit <- train(diagnosis ~, data = dat1, method = "glm")
modelFit <- train(diagnosis ~ . , data = dat1, method = "glm")
install.packages("e1071")
modelFit <- train(diagnosis ~ . , data = dat1, method = "glm")
modelFit
modelFit <- train(diagnosis ~ . , data = training, method = "glm")
modelFit
modelFit <- train(diagnosis ~ . , data = dat1, method = "glm")
pred <- predict(modelFit, testing)
pred
?confusionMatrix
confusionMatrix(pred)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
dat_test <- testing[,  which (grepl("^IL", names(testing)))]
dat2 <- cbind(training$diagnosis, dat_test)
dat2 <- cbind(testing$diagnosis, dat_test)
confusionMatrix(dat2$diagnosis, predict(modelFit, dat2))
modelFit <- train(diagnosis ~ . , data = dat1, method = "glm")
confusionMatrix(dat2$diagnosis, predict(modelFit, dat2))
pred <- predict(modelFit, dat2)
confusionMatrix(dat2$diagnosis, predict(modelFit, pred))
names(testing)
names(dat2)
names(dat1)
dat2$IL_11
dat1$IL_11
modelFit <- train(diagnosis ~ . , data = dat1, method = "glm")
pred <- predict(modelFit, dat2)
pred
pred <- predict(modelFit, dat2)
confusionMatrix(dat2$diagnosis, pred)
dat2 <- cbind(testing$diagnosis, dat_test)
modelFit <- train(diagnosis ~ . , data = dat1, method = "glm")
pred <- predict(modelFit, dat2)
confusionMatrix(dat2$diagnosis, pred)
confusionMatrix(pred, dat2$diagnosis )
confusionMatrix(dat2$diagnosis, predict(modelFit, dat2) )
confusionMatrix(dat2$diagnosis, predict(modelFit, pred) )
confusionMatrix(dat2$diagnosis, predict(modelFit, dat2) )
dat_test <- testing[,  which (grepl("^IL", names(testing)))]
pred <- predict(modelFit, dat_test)
confusionMatrix(dat2$diagnosis, predict(modelFit, pred) )
confusionMatrix(data = pred, reference = dat_test)
confusionMatrix(testing$diagnosis, predict(modelFit, dat_test) )
head(eig.decathlon2.active, 10)
preProc <- preProcess(dat1, method = 'pca', pcaComp = 7)
confusionMatrix(testing$diagnosis, pridict(preProc, dat_test) )
confusionMatrix(testing$diagnosis, predict(preProc, dat_test) )
confusionMatrix(testing$diagnosis, predict(preProc, pred2) )
pred2 <- predict(preProc, dat_test)
confusionMatrix(testing$diagnosis, predict(preProc, pred2) )
confusionMatrix(testing$diagnosis, predict(preProc, dat_test) )
head(eig.decathlon2.active, 10)
dat <- training[,  which (grepl("^IL", names(training)))]
dat_test <- testing[,  which (grepl("^IL", names(testing)))]
dat1 <- cbind(training$diagnosis, dat)
preProc <- preProcess(dat1, method = 'pca', pcaComp = 7)
pred2 <- predict(preProc, dat_test)
pred2
head(training$diagnosis)
confusionMatrix(testing$diagnosis, predict(preProc, dat_test) >0 )
confusionMatrix(testing$diagnosis, factor(predict(preProc, dat_test) >0 ))
pred <- predict(modelFit, dat_test)
pred
modelFit2 <- train(diagnosis ~ . , data = pred2, method = "glm")
preProc <- preProcess(dat1, method = 'pca', pcaComp = 7)
pred2 <- predict(preProc, dat1)
modelFit2 <- train(diagnosis ~ . , data = pred2, method = "glm")
preProc <- preProcess(dat1, method = 'pca', pcaComp = 7)
pred2 <- predict(preProc, dat1)
modelFit2 <- train(dat1$diagnosis ~ . , data = pred2, method = "glm")
names(pred2)
preProc <- preProcess(dat1, method = 'pca', pcaComp = 7)
pred2 <- predict(preProc, dat1)
names(pred2)
names(dat1)
dat1 <- cbind(training$diagnosis, dat)
names(dat1)[1] <- "diagnosis"
preProc <- preProcess(dat1, method = 'pca', pcaComp = 7)
pred2 <- predict(preProc, dat1)
modelFit2 <- train(dat1$diagnosis ~ . , data = pred2, method = "glm")
preProc <- preProcess(dat1[,-1], method = 'pca', pcaComp = 7)
pred2 <- predict(preProc, dat1[,-1])
pred2
modelFit2 <- train(dat1$diagnosis ~ . , data = pred2, method = "glm")
modelFit2 <- train(dat1$diagnosis ~ . ,  method = "glm" , data = pred2)
names(pred2)
dim(pred2)
dim(dat1)
pred3 <- cbind(dat1$diagnosis, pred2)
modelFit2 <- train(diagnosis ~ . ,  method = "glm" , data = pred3)
names(pred3)
names(pred3)[1] <"diagnosis"
names(pred3)[1] <- "diagnosis"
modelFit2 <- train(diagnosis ~ . ,  method = "glm" , data = pred3)
confusionMatrix(testing$diagnosis, predict(modelFit2, dat_test) )
confusionMatrix(testing$diagnosis, predict(preProc, dat_test) )
test_PC <- predict(preProc, dat_test)
names(test_PC)
confusionMatrix(testing$diagnosis, predict(modelFit2, test_PC) )
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(20160904)
sprintf("%s %d", "test", 1:3)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2015, 2016, 2017))
fars_read_years(2015, 2016, 2017)
fars_read_years(list(2015, 2016, 2017))
x <- make_filename(2033)
x
library(pgmm)
data(olive)
names(olive)
head(olive)
olive = olive[,-1]
library(tree)
install.packages("tree")
library(tree)
dat <- tree(Area ~ . , olive)
summary(dat)
predict(dat, newdata = newdata)
predict(dat, newdata)
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
predict(dat, newdata = newdata)
head(olive)
class(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
dim(SAheart)
dim(SAheart)[1]
?sample
sample(c(1,2,3,4),2)
sample(c(1,2,3,4),3)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family= binomial(), data =  trainSA)
library(caret)
library(rpart)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
library(dplyr)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family= binomial(), data =  trainSA)
pre <- predict(modFit,testSA )
pre
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, pre)
length(pre)
length(testSA)
length(trainSA)
dim(SAheart)[1]
dim(trainSA)
dim(testSA)
print(modFit)
dim(pre)
pre
length(pre)
(pre > 0.5)*1
testSA$chd
missClass(testSA$chd, pre)
pretr <- predict(modFit,trainSA )
missClass(trainSA$chd, pretr)
pretr
names(trainSA)
pre <- predict(modFit,testSA[,-10] )
pre
missClass(testSA$chd, pre)
pretr <- predict(modFit,trainSA[,-10] )
missClass(trainSA$chd, pretr)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family= binomial(link='logit'), data =  trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pre <- predict(modFit,testSA[,-10] )
missClass(testSA$chd, pre)
pretr <- predict(modFit,trainSA[,-10] )
missClass(trainSA$chd, pretr)
pre
pre <- predict(modFit,newdata = testSA )
missClass(testSA$chd, pre)
pretr <- predict(modFit,newdata = trainSA )
missClass(trainSA$chd, pretr)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family= "binomial", data =  trainSA)
pre <- predict(modFit,newdata = testSA )
missClass(testSA$chd, pre)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pre <- predict(modFit,newdata = testSA )
missClass(testSA$chd, pre)
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(testSA$chd, predict(modFit, newdata = testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1] / 2, replace = F)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family= "binomial", data =  trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modFit, newdata = testSA))
pretr <- predict(modFit,newdata = trainSA )
missClass(trainSA$chd, pretr)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
modFit <- train(y ~ . ,
data = trainSA, method = "rf", prox = TRUE)
varImp(modFit, scale = FALSE)
rf <- train(y ~ . ,
data = vowel.train, method = "rf", prox = TRUE)
rf <- train(y ~ . ,
data = vowel.train, method = "rf", prox = TRUE)
varImp(rf, scale = FALSE)
rf <- train(y ~ . ,
data = vowel.train, method = "rf")
rf <- randomForest(y ~ . , data = vowel.train)
varImp(rf)
varImp(rf$finalModel)
varImp(rf)
rf <- randomForest(y ~ . , data = vowel.train, importance=T)
varImp(rf)
modolive <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
library(pgmm)
data(olive)
olive = olive[,-1]
modolive <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modolive, newdata = newdata)
head(olive$Area)
olive$Area
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
modvowel <- randomForest(y ~ ., data = vowel.train,  importance=T)
order(varImp(modvowel), decreasing = T)
install.packages("lubridate")
install.packages("forecast")
install.packages("e1071")
install.packages("gbm")
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
library(dplyr)
library(lubridate)
library(forecast)
library(e1071)
library(gbm)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
class(vowel.test$y)
head(vowel.test$y)
(vowel.test$y)
set.seed(33833)
modFit <- train(as.factor(y)~.,data=vowel.train,method="rf")
pretr <- predict(modFit,newdata = vowel.test )
pretr
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
library(dplyr)
library(lubridate)
library(forecast)
library(e1071)
library(gbm)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit <- train(as.factor(y)~.,data=vowel.train,method="rf")
pretr <- predict(modFit,newdata = vowel.test )
names(pretr)
onfusionMatrix(pretr, vowel.test$y)
confusion.Matrix(pretr, vowel.test$y)
confusion.matrix(pretr, vowel.test$y)
confusion.matrix(pretr, vowel.test$y)
confusionMatrix(pretr, vowel.test$y)
gbmFit <- train(as.factor(y)~.,data=vowel.train,
method = "gbm")
pretr2 <- predict(gbmFit,newdata = vowel.test )
confusionMatrix(pretr2, vowel.test$y)
com <- which(pretr == pretr2)
sum(com)
length(com)
head(com)
tail(com)
length(pretr)
pretr3 <- pretr[com]
length(pretr3)
test2 <- vowel.test$y[com]
confusionMatrix(pretr3, test2)
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg , mode = "markers")
data(mtcars)
plot_ly(mtcars, x = wt, y = mpg , mode = "markers")
names(mtcars)
with(mtcars)
plot_ly(mtcars, x = wt, y = mpg , mode = "markers")
plot_ly(mtcars, x = "wt", y = mpg , mode = "markers")
plot_ly(mtcars, x = "wt", y = "mpg" , mode = "markers")
plot_ly(mtcars, x = wt, y = mpg , mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg , mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg , mode = "markers", color = as.factor(mtcars$cyl))
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg , mode = "markers", color = disp
)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg , mode = "markers", color = mtcars$disp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg , mode = "markers", color = as.factor(mtcars$cyl), size = mtcars$hp)
Sys.setenv("plotly_username"="mtp22peng")
Sys.setenv("plotly_api_key"="Lw29gGqQQFXNF7YXDHfS")
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("leaflet")
Sys.time()
Sys.time() - 2
Sys.time() - 2 m
Sys.time() - '2 m'
Sys.time() - 2 month
Sys.time()$month
d <- Sys.time()
d
d&month
m(d)
class(d)
d(:1,)
d(:,1)
d[1]
d[2]
d[[1]]
d[[2]]
month(as.POSIXlt(d))
dim(d)
class(d)
month(as.POSIXt(d))
format(d, "%b")
format(d, "%b") -2
format(d -2, "%b")
format(d -2000000, "%b")
format(d -20000000, "%b")
Sys.time() -2222
Sys.time() -2222222222
60*24*60*60
Sys.setlocale(category = "LC_ALL", locale = “UTF-8")
Sys.getlocale(category = "LC_ALL")
Sys.setlocale("LC_TIME", "English")
?format
sessionInfo()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
setlocale(LC_TIME, "C");
Sys.setlocale(LC_TIME, "C");
Sys.setlocale("LC_TIME", "English")
Sys.setenv(LANG = "en")
language = EN
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
Sys.setlocale(locale = "ru_RU.utf8")
?Sys.setlocale
Sys.setlocale("LC_TIME", "German"
)
Sys.setlocale("LC_ALL","English")
Sys.setlocale(, 'Polish')
rmarkdown::render('my_map.Rmd', encoding = 'UTF-8')
pwd()
dir()
Sys.setlocale(, 'English')
rmarkdown::render('my_map.Rmd', encoding = 'UTF-8')
Sys.setlocale(, 'English')
rmarkdown::render('my_map.Rmd', encoding = 'UTF-8')
Sys.setlocale(, 'English')
rmarkdown::render('my_map.Rmd', encoding = 'UTF-8')
Sys.setlocale(, 'English')
rmarkdown::render('my_map.Rmd', encoding = 'UTF-8')
Sys.setlocale(, 'English')
rmarkdown::render('my_plot.Rmd', encoding = 'UTF-8')
Sys.setlocale(, 'English')
rmarkdown::render('my_plot.Rmd', encoding = 'UTF-8')
shiny::runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
runApp('E:/coursera_homework/Data_products/week4')
setwd("E:/coursera_homework/Data_products/week4")
data(galton)
galton
install_github('slidify', 'ramnathv')
install.packages("install_github")
install.packages("devtools")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("Presentation")
library(slidify)
author("Presentation")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
View(galton)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
